// Generated by Haxe 3.3.0
(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var setImmediate;

    function addFromSetImmediateArguments(args) {
        tasksByHandle[nextHandle] = partiallyApplied.apply(undefined, args);
        return nextHandle++;
    }

    // This function accepts the same arguments as setImmediate, but
    // returns a function that requires no arguments.
    function partiallyApplied(handler) {
        var args = [].slice.call(arguments, 1);
        return function() {
            if (typeof handler === "function") {
                handler.apply(undefined, args);
            } else {
                (new Function("" + handler))();
            }
        };
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(partiallyApplied(runIfPresent, handle), 0);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    task();
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function installNextTickImplementation() {
        setImmediate = function() {
            var handle = addFromSetImmediateArguments(arguments);
            process.nextTick(partiallyApplied(runIfPresent, handle));
            return handle;
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        setImmediate = function() {
            var handle = addFromSetImmediateArguments(arguments);
            global.postMessage(messagePrefix + handle, "*");
            return handle;
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        setImmediate = function() {
            var handle = addFromSetImmediateArguments(arguments);
            channel.port2.postMessage(handle);
            return handle;
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        setImmediate = function() {
            var handle = addFromSetImmediateArguments(arguments);
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
            return handle;
        };
    }

    function installSetTimeoutImplementation() {
        setImmediate = function() {
            var handle = addFromSetImmediateArguments(arguments);
            setTimeout(partiallyApplied(runIfPresent, handle), 0);
            return handle;
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6â€“8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(new Function("return this")()));

(function ($hx_exports, $global) { "use strict";
$hx_exports["promhx"] = $hx_exports["promhx"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Intent = { __ename__ : true, __constructs__ : ["Skip","Next","Previous","Select","Up","Right","Down","Left"] };
Intent.Skip = ["Skip",0];
Intent.Skip.toString = $estr;
Intent.Skip.__enum__ = Intent;
Intent.Next = ["Next",1];
Intent.Next.toString = $estr;
Intent.Next.__enum__ = Intent;
Intent.Previous = ["Previous",2];
Intent.Previous.toString = $estr;
Intent.Previous.__enum__ = Intent;
Intent.Select = ["Select",3];
Intent.Select.toString = $estr;
Intent.Select.__enum__ = Intent;
Intent.Up = ["Up",4];
Intent.Up.toString = $estr;
Intent.Up.__enum__ = Intent;
Intent.Right = ["Right",5];
Intent.Right.toString = $estr;
Intent.Right.__enum__ = Intent;
Intent.Down = ["Down",6];
Intent.Down.toString = $estr;
Intent.Down.__enum__ = Intent;
Intent.Left = ["Left",7];
Intent.Left.toString = $estr;
Intent.Left.__enum__ = Intent;
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Logo = function() { };
Logo.__name__ = ["Logo"];
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var Main = function() { };
Main.__name__ = ["Main"];
Main.intended = function(intent) {
	return Main.intents.indexOf(intent) > -1;
};
Main.changeUniverse = function(verse) {
	var _this = Main._universes;
	if(!(__map_reserved[verse] != null?_this.existsReserved(verse):_this.h.hasOwnProperty(verse))) {
		throw new js__$Boot_HaxeError("Universe " + verse + " doesn't exist!");
	}
	if(Main.universe != null) {
		Main.universe.pause();
	}
	var _this1 = Main._universes;
	Main.universe = __map_reserved[verse] != null?_this1.getReserved(verse):_this1.h[verse];
	Main.universe.resume();
};
Main.main = function() {
	var script = window.document.createElement("script");
	script.onload = function() {
		Main.stats = new Stats();
		window.document.body.appendChild(Main.stats.dom);
	};
	script.src = "//rawgit.com/mrdoob/stats.js/master/build/stats.min.js";
	window.document.head.appendChild(script);
	Main.term = new vellum_DOSTerminal(80,25);
	Main.term.onInputEvent = Main.handleInput;
	var _this = Main._universes;
	var value = new universes_Splash();
	if(__map_reserved.Splash != null) {
		_this.setReserved("Splash",value);
	} else {
		_this.h["Splash"] = value;
	}
	var _this1 = Main._universes;
	var value1 = new universes_Intro();
	if(__map_reserved.Intro != null) {
		_this1.setReserved("Intro",value1);
	} else {
		_this1.h["Intro"] = value1;
	}
	var _this2 = Main._universes;
	var value2 = new universes_MainMenu();
	if(__map_reserved.MainMenu != null) {
		_this2.setReserved("MainMenu",value2);
	} else {
		_this2.h["MainMenu"] = value2;
	}
	var _this3 = Main._universes;
	var value3 = new universes_Play();
	if(__map_reserved.Play != null) {
		_this3.setReserved("Play",value3);
	} else {
		_this3.h["Play"] = value3;
	}
	Main.term.load().then(function(x) {
		Main.changeUniverse("Play");
		Main.term.clear();
		Timing.onUpdate = Main.onUpdate;
		Timing.onRender = Main.onRender;
		Timing.start();
	},{ fileName : "Main.hx", lineNumber : 71, className : "Main", methodName : "main"});
};
Main.onUpdate = function(dt) {
	Main.intents = Main.tempIntents;
	Main.tempIntents = [];
	Main.universe.update.update(dt);
};
Main.onRender = function(dt,alpha) {
	Main.universe.render.update(dt);
	Main.term.render();
	if(Main.stats != null) {
		Main.stats.update();
	}
};
Main.handleInput = function(code,type,shift,alt) {
	var intent = Main.universe.input.check(code,type,shift,alt);
	if(intent != null) {
		Main.tempIntents.push(intent);
		return true;
	}
	return false;
};
Math.__name__ = ["Math"];
var Pauseable = function(universe) {
	universe.onResume.push($bind(this,this.onResume));
	universe.onPause.push($bind(this,this.onPause));
};
Pauseable.__name__ = ["Pauseable"];
Pauseable.prototype = {
	onResume: function() {
	}
	,onPause: function() {
	}
	,__class__: Pauseable
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var TEvent = { __ename__ : true, __constructs__ : ["DebugMessage","ChangeUniverse"] };
TEvent.DebugMessage = function(message) { var $x = ["DebugMessage",0,message]; $x.__enum__ = TEvent; $x.toString = $estr; return $x; };
TEvent.ChangeUniverse = function(verse) { var $x = ["ChangeUniverse",1,verse]; $x.__enum__ = TEvent; $x.toString = $estr; return $x; };
var TTile = { __ename__ : true, __constructs__ : ["Floor","Wall","Door"] };
TTile.Floor = ["Floor",0];
TTile.Floor.toString = $estr;
TTile.Floor.__enum__ = TTile;
TTile.Wall = ["Wall",1];
TTile.Wall.toString = $estr;
TTile.Wall.__enum__ = TTile;
TTile.Door = ["Door",2];
TTile.Door.toString = $estr;
TTile.Door.__enum__ = TTile;
var Timing = function() { };
Timing.__name__ = ["Timing"];
Timing.onRenderFrame = function(ts) {
	Timing.time = ts / 1000;
	var delta = Timing.time - Timing.lastTime;
	Timing.lastTime = Timing.time;
	Timing.accumulator += delta;
	while(Timing.accumulator >= Timing.dt) {
		Timing.onUpdate(Timing.dt);
		Timing.accumulator -= Timing.dt;
	}
	Timing.alpha = Timing.accumulator / Timing.dt;
	Timing.onRender(delta,Timing.alpha);
	Timing.requestFrame();
};
Timing.requestFrame = function() {
	Timing.animationFrameID = window.requestAnimationFrame(Timing.onRenderFrame);
};
Timing.start = function() {
	Timing.animationFrameID = window.requestAnimationFrame(Timing.onRenderFrame);
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
var Universe = function() {
	this.onResume = [];
	this.onPause = [];
	this.input = new vellum_Input_$Intent();
	this.engine = new edge_Engine();
	this.update = this.engine.createPhase();
	this.render = this.engine.createPhase();
};
Universe.__name__ = ["Universe"];
Universe.prototype = {
	pause: function() {
		var _g = 0;
		var _g1 = this.onPause;
		while(_g < _g1.length) {
			var cb = _g1[_g];
			++_g;
			cb();
		}
	}
	,resume: function() {
		var _g = 0;
		var _g1 = this.onResume;
		while(_g < _g1.length) {
			var cb = _g1[_g];
			++_g;
			cb();
		}
	}
	,__class__: Universe
};
var edge_IComponent = function() { };
edge_IComponent.__name__ = ["edge","IComponent"];
var components_Bounds = function() {
};
components_Bounds.__name__ = ["components","Bounds"];
components_Bounds.__interfaces__ = [edge_IComponent];
components_Bounds.prototype = {
	y: function(min,max) {
		this.minY = min;
		this.maxY = max;
		return this;
	}
	,__class__: components_Bounds
};
var components_Camera = function(x,y,width,height) {
	this.viewportX = x;
	this.viewportY = y;
	this.width = width;
	this.height = height;
};
components_Camera.__name__ = ["components","Camera"];
components_Camera.__interfaces__ = [edge_IComponent];
components_Camera.prototype = {
	__class__: components_Camera
};
var components_Event = function(event) {
	this.event = event;
};
components_Event.__name__ = ["components","Event"];
components_Event.__interfaces__ = [edge_IComponent];
components_Event.prototype = {
	__class__: components_Event
};
var components_Image = function(src) {
	this.map = new haxe_ds_StringMap();
	this.lines = StringTools.trim(src).split("\n");
};
components_Image.__name__ = ["components","Image"];
components_Image.__interfaces__ = [edge_IComponent];
components_Image.prototype = {
	addMap: function($char,code,fore,back) {
		var _this = this.map;
		var value = new vellum_Glyph(code == null?HxOverrides.cca($char,0):code,fore,back);
		if(__map_reserved[$char] != null) {
			_this.setReserved($char,value);
		} else {
			_this.h[$char] = value;
		}
		return this;
	}
	,__class__: components_Image
};
var components_IntentEvent = function(intent,event) {
	this.intent = intent;
	this.event = event;
};
components_IntentEvent.__name__ = ["components","IntentEvent"];
components_IntentEvent.__interfaces__ = [edge_IComponent];
components_IntentEvent.prototype = {
	__class__: components_IntentEvent
};
var components_MenuItem = function(index,event) {
	this.index = index;
	this.event = event;
};
components_MenuItem.__name__ = ["components","MenuItem"];
components_MenuItem.__interfaces__ = [edge_IComponent];
components_MenuItem.prototype = {
	__class__: components_MenuItem
};
var components_MenuSelector = function(selection) {
	this.selection = selection;
};
components_MenuSelector.__name__ = ["components","MenuSelector"];
components_MenuSelector.__interfaces__ = [edge_IComponent];
components_MenuSelector.prototype = {
	setOffset: function(x,y) {
		this.positionOffsetX = x;
		this.positionOffsetY = y;
		return this;
	}
	,__class__: components_MenuSelector
};
var components_PlayerControl = function() {
};
components_PlayerControl.__name__ = ["components","PlayerControl"];
components_PlayerControl.__interfaces__ = [edge_IComponent];
components_PlayerControl.prototype = {
	__class__: components_PlayerControl
};
var components_Position = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
components_Position.__name__ = ["components","Position"];
components_Position.__interfaces__ = [edge_IComponent];
components_Position.prototype = {
	__class__: components_Position
};
var components_Sound = function(src,play,loop) {
	var _gthis = this;
	this.loop = loop;
	this.play = play;
	this.playing = false;
	this.playCount = 0;
	this.resume = false;
	this.howl = new Howl({ src : [src], autoplay : false, loop : loop, onplay : function(id) {
		_gthis.playing = true;
		_gthis.soundID = id;
	}, onend : function(id1) {
		_gthis.playCount++;
		_gthis.playing = _gthis.howl.loop();
	}});
};
components_Sound.__name__ = ["components","Sound"];
components_Sound.__interfaces__ = [edge_IComponent];
components_Sound.prototype = {
	__class__: components_Sound
};
var components_Text = function(text,foreground,background) {
	this.text = text != null?text:"";
	this.foreground = foreground;
	this.background = background;
};
components_Text.__name__ = ["components","Text"];
components_Text.__interfaces__ = [edge_IComponent];
components_Text.prototype = {
	__class__: components_Text
};
var components_TileMap = function(width,height) {
	this.width = width;
	this.height = height;
	this.map = new Array(height);
	var _g1 = 0;
	var _g = height;
	while(_g1 < _g) {
		var y = _g1++;
		this.map[y] = new Array(width);
		var _g3 = 0;
		var _g2 = width;
		while(_g3 < _g2) this.map[y][_g3++] = TTile.Wall;
	}
};
components_TileMap.__name__ = ["components","TileMap"];
components_TileMap.__interfaces__ = [edge_IComponent];
components_TileMap.prototype = {
	set: function(x,y,tile) {
		this.map[y][x] = tile;
		return this;
	}
	,__class__: components_TileMap
};
var components_TileMapGeneration = function(width,height) {
	this.width = width;
	this.height = height;
};
components_TileMapGeneration.__name__ = ["components","TileMapGeneration"];
components_TileMapGeneration.__interfaces__ = [edge_IComponent];
components_TileMapGeneration.prototype = {
	__class__: components_TileMapGeneration
};
var components_Timer = function(time,event) {
	this.time = time;
	this.event = event;
};
components_Timer.__name__ = ["components","Timer"];
components_Timer.__interfaces__ = [edge_IComponent];
components_Timer.prototype = {
	__class__: components_Timer
};
var components_Velocity = function(vx,vy,vz) {
	if(vz == null) {
		vz = 0;
	}
	this.vx = vx;
	this.vy = vy;
	this.vz = vz;
};
components_Velocity.__name__ = ["components","Velocity"];
components_Velocity.__interfaces__ = [edge_IComponent];
components_Velocity.prototype = {
	__class__: components_Velocity
};
var edge_Engine = function() {
	this.mapEntities = new haxe_ds_ObjectMap();
	this.listPhases = [];
};
edge_Engine.__name__ = ["edge","Engine"];
edge_Engine.prototype = {
	create: function(components) {
		var entity = new edge_Entity(this,components);
		this.mapEntities.set(entity,true);
		this.matchSystems(entity);
		return entity;
	}
	,remove: function(entity) {
		this.eachSystem(function(system) {
			system.__process__.removeEntity(entity);
		});
		this.mapEntities.remove(entity);
		entity.engine = null;
	}
	,createPhase: function() {
		var phase = new edge_Phase(this);
		this.listPhases.push(phase);
		return phase;
	}
	,eachSystem: function(f) {
		var _g = 0;
		var _g1 = this.listPhases;
		while(_g < _g1.length) {
			var phase = _g1[_g];
			++_g;
			var tmp = phase.systems();
			while(tmp.hasNext()) f(tmp.next());
		}
	}
	,addSystem: function(system) {
		this.eachSystem(function(s) {
			if(s == system) {
				throw new js__$Boot_HaxeError("System \"" + Std.string(system) + "\" already exists in Engine");
			}
		});
		var tmp = this.mapEntities.keys();
		while(tmp.hasNext()) system.__process__.addEntity(tmp.next());
	}
	,removeSystem: function(system) {
		var tmp = this.mapEntities.keys();
		while(tmp.hasNext()) system.__process__.removeEntity(tmp.next());
	}
	,updateSystem: function(system,t) {
		return system.__process__.update(this,t);
	}
	,matchSystems: function(entity) {
		this.eachSystem(function(system) {
			system.__process__.addEntity(entity);
		});
	}
	,__class__: edge_Engine
};
var edge_Entity = function(engine,components) {
	this.engine = engine;
	this.map = new haxe_ds_StringMap();
	if(null != components) {
		this.addMany(components);
	}
};
edge_Entity.__name__ = ["edge","Entity"];
edge_Entity.prototype = {
	add: function(component) {
		if(null == this.engine) {
			return;
		}
		this._add(component);
		this.engine.matchSystems(this);
	}
	,addMany: function(components) {
		var _gthis = this;
		if(null == this.engine) {
			return;
		}
		components.map(function(_) {
			_gthis._add(_);
			return;
		});
		this.engine.matchSystems(this);
	}
	,destroy: function() {
		if(null == this.engine) {
			return;
		}
		this.engine.remove(this);
		this.map = new haxe_ds_StringMap();
	}
	,remove: function(component) {
		this._remove(component);
		this.engine.matchSystems(this);
	}
	,_add: function(component) {
		var type = this.key(component);
		var _this = this.map;
		if(__map_reserved[type] != null?_this.existsReserved(type):_this.h.hasOwnProperty(type)) {
			var _this1 = this.map;
			this.remove(__map_reserved[type] != null?_this1.getReserved(type):_this1.h[type]);
		}
		var _this2 = this.map;
		if(__map_reserved[type] != null) {
			_this2.setReserved(type,component);
		} else {
			_this2.h[type] = component;
		}
	}
	,_remove: function(component) {
		this._removeTypeName(this.key(component));
	}
	,_removeTypeName: function(type) {
		this.map.remove(type);
	}
	,key: function(component) {
		var t = component == null?null:js_Boot.getClass(component);
		var s = Type.getSuperClass(t);
		while(s != null && s != edge_IComponent) {
			t = s;
			s = Type.getSuperClass(t);
		}
		return Type.getClassName(t);
	}
	,__class__: edge_Entity
};
var edge_ISystem = function() { };
edge_ISystem.__name__ = ["edge","ISystem"];
edge_ISystem.prototype = {
	__class__: edge_ISystem
};
var edge_Phase = function(engine) {
	this.engine = engine;
	this.mapSystem = new haxe_ds_ObjectMap();
	this.mapType = new haxe_ds_StringMap();
	this.phases = [];
	this.enabled = true;
};
edge_Phase.__name__ = ["edge","Phase"];
edge_Phase.prototype = {
	add: function(system) {
		this.remove(system);
		var node = this.createNode(system);
		if(null == this.first) {
			this.first = node;
			this.last = node;
		} else {
			node.prev = this.last;
			this.last.next = node;
			this.last = node;
		}
	}
	,remove: function(system) {
		var node = this.mapSystem.h[system.__id__];
		this.mapType.remove(this.key(system));
		if(null == node) {
			return;
		}
		this.engine.removeSystem(system);
		this.mapSystem.remove(system);
		if(node == this.first && node == this.last) {
			this.first = this.last = null;
		} else if(node == this.first) {
			this.first = node.next;
			node.next.prev = null;
		} else if(node == this.last) {
			this.last = node.prev;
			node.prev.next = null;
		} else {
			node.prev.next = node.next;
			node.next.prev = node.prev;
		}
	}
	,systems: function() {
		return new edge_core_NodeSystemIterator(this.first);
	}
	,update: function(t) {
		if(!this.enabled) {
			return;
		}
		var result;
		var tmp = this.systems();
		while(tmp.hasNext()) {
			result = this.engine.updateSystem(tmp.next(),t);
			if(!result) {
				return;
			}
		}
		var _g = 0;
		var _g1 = this.phases;
		while(_g < _g1.length) {
			var phase = _g1[_g];
			++_g;
			phase.update(t);
		}
	}
	,createNode: function(system) {
		var node = new edge_core_NodeSystem(system);
		this.mapSystem.set(system,node);
		var key = this.key(system);
		var _this = this.mapType;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,system);
		} else {
			_this.h[key] = system;
		}
		this.engine.addSystem(system);
		return node;
	}
	,key: function(system) {
		return Type.getClassName(system == null?null:js_Boot.getClass(system));
	}
	,__class__: edge_Phase
};
var edge_View = function() {
	this.map = new haxe_ds_ObjectMap();
	this.count = 0;
};
edge_View.__name__ = ["edge","View"];
edge_View.prototype = {
	iterator: function() {
		var _gthis = this;
		var keys = this.map.keys();
		var holder = { entity : null, data : null};
		return { hasNext : function() {
			return keys.hasNext();
		}, next : function() {
			var key = keys.next();
			holder.entity = key;
			holder.data = _gthis.map.h[key.__id__];
			return holder;
		}};
	}
	,tryAdd: function(entity,data) {
		if(this.map.h.__keys__[entity.__id__] != null) {
			return false;
		}
		this.map.set(entity,data);
		this.count++;
		return true;
	}
	,tryRemove: function(entity) {
		var o = this.map.h[entity.__id__];
		if(null == o) {
			return null;
		}
		this.map.remove(entity);
		this.count--;
		return o;
	}
	,__class__: edge_View
};
var edge_core_ISystemProcess = function() { };
edge_core_ISystemProcess.__name__ = ["edge","core","ISystemProcess"];
edge_core_ISystemProcess.prototype = {
	__class__: edge_core_ISystemProcess
};
var edge_core_NodeSystem = function(system) {
	this.system = system;
};
edge_core_NodeSystem.__name__ = ["edge","core","NodeSystem"];
edge_core_NodeSystem.prototype = {
	__class__: edge_core_NodeSystem
};
var edge_core_NodeSystemIterator = function(node) {
	this.node = node;
};
edge_core_NodeSystemIterator.__name__ = ["edge","core","NodeSystemIterator"];
edge_core_NodeSystemIterator.prototype = {
	hasNext: function() {
		return null != this.node;
	}
	,next: function() {
		var system = this.node.system;
		this.node = this.node.next;
		return system;
	}
	,__class__: edge_core_NodeSystemIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var promhx_base_AsyncBase = function(d,pos) {
	this.parentConstructorPos = [];
	this.id = promhx_base_AsyncBase.id_ctr += 1;
	this.constructorPos = pos;
	this._resolved = false;
	this._pending = false;
	this._errorPending = false;
	this._fulfilled = false;
	this._update = [];
	this._error = [];
	this._errored = false;
	if(d != null) {
		var next = this;
		var f = function(x) {
			return x;
		};
		next.parentConstructorPos = d.parentConstructorPos.concat([]);
		next.parentConstructorPos.push(d.constructorPos);
		d._update.push({ async : next, linkf : function(x1) {
			next.handleResolve(f(x1));
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(d,next,f);
	}
};
promhx_base_AsyncBase.__name__ = ["promhx","base","AsyncBase"];
promhx_base_AsyncBase.immediateLinkUpdate = function(current,next,f) {
	if(current._errored && !current._errorPending && current._error.length <= 0) {
		next.handleError(current._errorVal);
	}
	if(current._resolved && !current._pending) {
		try {
			next.handleResolve(f(current._val));
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			next.handleError(e);
		}
	}
};
promhx_base_AsyncBase.prototype = {
	handleResolve: function(val) {
		this._resolve(val);
	}
	,_resolve: function(val) {
		var _gthis = this;
		if(this._pending) {
			var f = $bind(this,this._resolve);
			var a1 = val;
			promhx_base_EventLoop.queue.add(function() {
				f(a1);
			});
			promhx_base_EventLoop.continueOnNextLoop();
		} else {
			this._resolved = true;
			this._pending = true;
			promhx_base_EventLoop.queue.add(function() {
				_gthis._val = val;
				var _g = 0;
				var _g1 = _gthis._update;
				while(_g < _g1.length) {
					var up = _g1[_g];
					++_g;
					try {
						up.linkf(val);
					} catch( e ) {
						if (e instanceof js__$Boot_HaxeError) e = e.val;
						up.async.handleError(e);
					}
				}
				_gthis._fulfilled = true;
				_gthis._pending = false;
			});
			promhx_base_EventLoop.continueOnNextLoop();
		}
	}
	,handleError: function(error) {
		this._handleError(error);
	}
	,_handleError: function(error) {
		var _gthis = this;
		var update_errors = function(e) {
			if(_gthis._error.length > 0) {
				var _g = 0;
				var _g1 = _gthis._error;
				while(_g < _g1.length) {
					var ef = _g1[_g];
					++_g;
					ef(e);
				}
			} else if(_gthis._update.length > 0) {
				var _g2 = 0;
				var _g11 = _gthis._update;
				while(_g2 < _g11.length) {
					var up = _g11[_g2];
					++_g2;
					up.async.handleError(e);
				}
			} else {
				var stacks = _gthis.parentConstructorPos.concat([]);
				stacks.push(_gthis.constructorPos);
				var set = new haxe_ds_StringMap();
				var i = 0;
				while(i < stacks.length) {
					var key = stacks[i].className + stacks[i].methodName + stacks[i].lineNumber;
					if(__map_reserved[key] != null?set.existsReserved(key):set.h.hasOwnProperty(key)) {
						stacks.splice(i,1);
					} else {
						if(__map_reserved[key] != null) {
							set.setReserved(key,true);
						} else {
							set.h[key] = true;
						}
						++i;
					}
				}
				console.log("Promise Call Stack:\n\t" + stacks.map(function(s) {
					return "" + s.fileName + ":" + s.lineNumber + " " + s.className + "." + s.methodName + "()";
				}).join("\n\t"));
				throw js__$Boot_HaxeError.wrap(e);
			}
			_gthis._errorPending = false;
		};
		if(!this._errorPending) {
			this._errorPending = true;
			this._errored = true;
			this._errorVal = error;
			promhx_base_EventLoop.queue.add(function() {
				if(_gthis._errorMap != null) {
					try {
						_gthis._resolve(_gthis._errorMap(error));
					} catch( e1 ) {
						if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
						update_errors(e1);
					}
				} else {
					update_errors(error);
				}
			});
			promhx_base_EventLoop.continueOnNextLoop();
		}
	}
	,__class__: promhx_base_AsyncBase
};
var promhx_Deferred = $hx_exports["promhx"]["Deferred"] = function() {
	promhx_base_AsyncBase.call(this,null,{ fileName : "Deferred.hx", lineNumber : 7, className : "promhx.Deferred", methodName : "new"});
};
promhx_Deferred.__name__ = ["promhx","Deferred"];
promhx_Deferred.__super__ = promhx_base_AsyncBase;
promhx_Deferred.prototype = $extend(promhx_base_AsyncBase.prototype,{
	resolve: function(val) {
		this.handleResolve(val);
	}
	,promise: function() {
		return new promhx_Promise(this,{ fileName : "Deferred.hx", lineNumber : 20, className : "promhx.Deferred", methodName : "promise"});
	}
	,__class__: promhx_Deferred
});
var promhx_Promise = $hx_exports["promhx"]["Promise"] = function(d,pos) {
	promhx_base_AsyncBase.call(this,d,pos);
	this._rejected = false;
};
promhx_Promise.__name__ = ["promhx","Promise"];
promhx_Promise.__super__ = promhx_base_AsyncBase;
promhx_Promise.prototype = $extend(promhx_base_AsyncBase.prototype,{
	handleResolve: function(val) {
		if(this._resolved) {
			throw new js__$Boot_HaxeError(promhx_error_PromiseError.AlreadyResolved("Promise has already been resolved"));
		}
		this._resolve(val);
	}
	,then: function(f,pos) {
		var ret = new promhx_Promise(null,pos);
		var next = ret;
		var f1 = f;
		next.parentConstructorPos = this.parentConstructorPos.concat([]);
		next.parentConstructorPos.push(this.constructorPos);
		this._update.push({ async : next, linkf : function(x) {
			next.handleResolve(f1(x));
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,next,f1);
		return ret;
	}
	,handleError: function(error) {
		this._rejected = true;
		this._handleError(error);
	}
	,__class__: promhx_Promise
});
var promhx_base_EventLoop = function() { };
promhx_base_EventLoop.__name__ = ["promhx","base","EventLoop"];
promhx_base_EventLoop.f = function() {
	var fn = promhx_base_EventLoop.queue.pop();
	if(fn != null) {
		fn();
	}
	if(!promhx_base_EventLoop.queue.isEmpty()) {
		promhx_base_EventLoop.continueOnNextLoop();
	}
};
promhx_base_EventLoop.continueOnNextLoop = function() {
	if(promhx_base_EventLoop.nextLoop != null) {
		promhx_base_EventLoop.nextLoop(promhx_base_EventLoop.f);
	} else {
		setImmediate(promhx_base_EventLoop.f);
	}
};
var promhx_error_PromiseError = { __ename__ : true, __constructs__ : ["AlreadyResolved","DownstreamNotFullfilled"] };
promhx_error_PromiseError.AlreadyResolved = function(message) { var $x = ["AlreadyResolved",0,message]; $x.__enum__ = promhx_error_PromiseError; $x.toString = $estr; return $x; };
promhx_error_PromiseError.DownstreamNotFullfilled = function(message) { var $x = ["DownstreamNotFullfilled",1,message]; $x.__enum__ = promhx_error_PromiseError; $x.toString = $estr; return $x; };
var systems_ChangeUniverseEvent = function() {
	this.__process__ = new systems_ChangeUniverseEvent_$SystemProcess(this);
};
systems_ChangeUniverseEvent.__name__ = ["systems","ChangeUniverseEvent"];
systems_ChangeUniverseEvent.__interfaces__ = [edge_ISystem];
systems_ChangeUniverseEvent.prototype = {
	update: function(event) {
		var _g = event.event;
		if(_g[1] == 1) {
			this.entity.destroy();
			Main.changeUniverse(_g[2]);
		}
		return true;
	}
	,__class__: systems_ChangeUniverseEvent
};
var systems_ChangeUniverseEvent_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
};
systems_ChangeUniverseEvent_$SystemProcess.__name__ = ["systems","ChangeUniverseEvent_SystemProcess"];
systems_ChangeUniverseEvent_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_ChangeUniverseEvent_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
	}
	,addEntity: function(entity) {
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			var item = tmp.next();
			this.system.entity = item.entity;
			data = item.data;
			result = this.system.update(data.event);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 1;
		var o = { event : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_Event)) {
				o.event = component;
				count = 0;
				break;
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_ChangeUniverseEvent_$SystemProcess
};
var systems_DebugEvent = function() {
	this.__process__ = new systems_DebugEvent_$SystemProcess(this);
};
systems_DebugEvent.__name__ = ["systems","DebugEvent"];
systems_DebugEvent.__interfaces__ = [edge_ISystem];
systems_DebugEvent.prototype = {
	update: function(event) {
		var _g = event.event;
		if(_g[1] == 0) {
			Main.console.debug("Debug:",_g[2]);
			this.entity.destroy();
		}
		return true;
	}
	,__class__: systems_DebugEvent
};
var systems_DebugEvent_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
};
systems_DebugEvent_$SystemProcess.__name__ = ["systems","DebugEvent_SystemProcess"];
systems_DebugEvent_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_DebugEvent_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
	}
	,addEntity: function(entity) {
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			var item = tmp.next();
			this.system.entity = item.entity;
			data = item.data;
			result = this.system.update(data.event);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 1;
		var o = { event : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_Event)) {
				o.event = component;
				count = 0;
				break;
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_DebugEvent_$SystemProcess
};
var systems_ImageRenderer = function() {
	this.__process__ = new systems_ImageRenderer_$SystemProcess(this);
};
systems_ImageRenderer.__name__ = ["systems","ImageRenderer"];
systems_ImageRenderer.__interfaces__ = [edge_ISystem];
systems_ImageRenderer.prototype = {
	update: function(pos,image) {
		var x = pos.x | 0;
		var y = pos.y | 0;
		var _g = 0;
		var _g1 = image.lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var glyphs = [];
			var _g3 = 0;
			var _g2 = line.length;
			while(_g3 < _g2) {
				var i = _g3++;
				var _this = image.map;
				var key = line.charAt(i);
				if(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key)) {
					var _this1 = image.map;
					var key1 = line.charAt(i);
					glyphs.push(__map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1]);
				} else {
					glyphs.push(new vellum_Glyph(HxOverrides.cca(line,i)));
				}
			}
			Main.term.printGlyphs(x,y,glyphs);
			++y;
		}
		return true;
	}
	,__class__: systems_ImageRenderer
};
var systems_ImageRenderer_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
};
systems_ImageRenderer_$SystemProcess.__name__ = ["systems","ImageRenderer_SystemProcess"];
systems_ImageRenderer_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_ImageRenderer_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
	}
	,addEntity: function(entity) {
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			data = tmp.next().data;
			result = this.system.update(data.pos,data.image);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 2;
		var o = { pos : null, image : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_Position)) {
				o.pos = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
			if(js_Boot.__instanceof(component,components_Image)) {
				o.image = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_ImageRenderer_$SystemProcess
};
var systems_IntentEvent = function() {
	this.__process__ = new systems_IntentEvent_$SystemProcess(this);
};
systems_IntentEvent.__name__ = ["systems","IntentEvent"];
systems_IntentEvent.__interfaces__ = [edge_ISystem];
systems_IntentEvent.prototype = {
	update: function(intentEvent) {
		if(Main.intended(intentEvent.intent)) {
			this.entity.engine.create([new components_Event(intentEvent.event)]);
		}
		return true;
	}
	,__class__: systems_IntentEvent
};
var systems_IntentEvent_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
};
systems_IntentEvent_$SystemProcess.__name__ = ["systems","IntentEvent_SystemProcess"];
systems_IntentEvent_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_IntentEvent_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
	}
	,addEntity: function(entity) {
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			var item = tmp.next();
			this.system.entity = item.entity;
			data = item.data;
			result = this.system.update(data.intentEvent);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 1;
		var o = { intentEvent : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_IntentEvent)) {
				o.intentEvent = component;
				count = 0;
				break;
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_IntentEvent_$SystemProcess
};
var systems_KeepInBounds = function() {
	this.__process__ = new systems_KeepInBounds_$SystemProcess(this);
};
systems_KeepInBounds.__name__ = ["systems","KeepInBounds"];
systems_KeepInBounds.__interfaces__ = [edge_ISystem];
systems_KeepInBounds.prototype = {
	update: function(pos,bounds) {
		if(bounds.minX != null && pos.x < bounds.minX) {
			pos.x = bounds.minX;
		}
		if(bounds.maxX != null && pos.x > bounds.maxX) {
			pos.x = bounds.maxX;
		}
		if(bounds.minY != null && pos.y < bounds.minY) {
			pos.y = bounds.minY;
		}
		if(bounds.maxY != null && pos.y > bounds.maxY) {
			pos.y = bounds.maxY;
		}
		if(bounds.minZ != null && pos.z < bounds.minZ) {
			pos.z = bounds.minZ;
		}
		if(bounds.maxZ != null && pos.z > bounds.maxZ) {
			pos.z = bounds.maxZ;
		}
		return true;
	}
	,__class__: systems_KeepInBounds
};
var systems_KeepInBounds_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
};
systems_KeepInBounds_$SystemProcess.__name__ = ["systems","KeepInBounds_SystemProcess"];
systems_KeepInBounds_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_KeepInBounds_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
	}
	,addEntity: function(entity) {
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			data = tmp.next().data;
			result = this.system.update(data.pos,data.bounds);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 2;
		var o = { pos : null, bounds : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_Position)) {
				o.pos = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
			if(js_Boot.__instanceof(component,components_Bounds)) {
				o.bounds = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_KeepInBounds_$SystemProcess
};
var systems_Kinematics = function() {
	this.__process__ = new systems_Kinematics_$SystemProcess(this);
};
systems_Kinematics.__name__ = ["systems","Kinematics"];
systems_Kinematics.__interfaces__ = [edge_ISystem];
systems_Kinematics.prototype = {
	update: function(pos,vel) {
		pos.x += vel.vx * this.timeDelta;
		pos.y += vel.vy * this.timeDelta;
		return true;
	}
	,__class__: systems_Kinematics
};
var systems_Kinematics_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
};
systems_Kinematics_$SystemProcess.__name__ = ["systems","Kinematics_SystemProcess"];
systems_Kinematics_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_Kinematics_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
	}
	,addEntity: function(entity) {
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		this.system.timeDelta = delta;
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			data = tmp.next().data;
			result = this.system.update(data.pos,data.vel);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 2;
		var o = { pos : null, vel : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_Position)) {
				o.pos = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
			if(js_Boot.__instanceof(component,components_Velocity)) {
				o.vel = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_Kinematics_$SystemProcess
};
var systems_Menu = function() {
	this.maxIndex = 0;
	this.__process__ = new systems_Menu_$SystemProcess(this);
};
systems_Menu.__name__ = ["systems","Menu"];
systems_Menu.__interfaces__ = [edge_ISystem];
systems_Menu.prototype = {
	menuItemsAdded: function(entity,data) {
		if(data.menuItem.index > this.maxIndex) {
			this.maxIndex = data.menuItem.index;
		}
	}
	,menuItemsRemoved: function(entity,data) {
		this.maxIndex = 0;
		var tmp = this.menuItems.iterator();
		while(tmp.hasNext()) {
			var item = tmp.next();
			if(item.data.menuItem.index > this.maxIndex) {
				this.maxIndex = item.data.menuItem.index;
			}
		}
	}
	,getSelection: function(selection) {
		var tmp = this.menuItems.iterator();
		while(tmp.hasNext()) {
			var item = tmp.next();
			if(selection == item.data.menuItem.index) {
				return item.data;
			}
		}
		return null;
	}
	,update: function(selector,pos) {
		if(Main.intended(Intent.Previous) && selector.selection > 0) {
			selector.selection--;
		}
		if(Main.intended(Intent.Next) && selector.selection < this.maxIndex) {
			selector.selection++;
		}
		if(Main.intended(Intent.Select)) {
			this.entity.engine.create([new components_Event(this.getSelection(selector.selection).menuItem.event)]);
		}
		var selected = this.getSelection(selector.selection);
		pos.x = selected.pos.x + selector.positionOffsetX;
		pos.y = selected.pos.y + selector.positionOffsetY;
		return true;
	}
	,__class__: systems_Menu
};
var systems_Menu_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
	system.menuItems = new edge_View();
};
systems_Menu_$SystemProcess.__name__ = ["systems","Menu_SystemProcess"];
systems_Menu_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_Menu_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
		var removed = this.system.menuItems.tryRemove(entity);
		if(removed != null) {
			this.system.menuItemsRemoved(entity,removed);
		}
	}
	,addEntity: function(entity) {
		this.menuItemsMatchRequirements(entity);
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			var item = tmp.next();
			this.system.entity = item.entity;
			data = item.data;
			result = this.system.update(data.selector,data.pos);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,menuItemsMatchRequirements: function(entity) {
		var removed = this.system.menuItems.tryRemove(entity);
		var count = 2;
		var o = { pos : null, menuItem : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_Position)) {
				o.pos = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
			if(js_Boot.__instanceof(component,components_MenuItem)) {
				o.menuItem = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
		}
		var added = count == 0 && this.system.menuItems.tryAdd(entity,o);
		if(null != removed && !added) {
			this.system.menuItemsRemoved(entity,removed);
		}
		if(added && null == removed) {
			this.system.menuItemsAdded(entity,o);
		}
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 2;
		var o = { selector : null, pos : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_MenuSelector)) {
				o.selector = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
			if(js_Boot.__instanceof(component,components_Position)) {
				o.pos = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_Menu_$SystemProcess
};
var systems_PlayerMovement = function() {
	this.__process__ = new systems_PlayerMovement_$SystemProcess(this);
};
systems_PlayerMovement.__name__ = ["systems","PlayerMovement"];
systems_PlayerMovement.__interfaces__ = [edge_ISystem];
systems_PlayerMovement.prototype = {
	update: function(pos,control) {
		if(Main.intended(Intent.Up)) {
			pos.y--;
		}
		if(Main.intended(Intent.Right)) {
			pos.x++;
		}
		if(Main.intended(Intent.Down)) {
			pos.y++;
		}
		if(Main.intended(Intent.Left)) {
			pos.x--;
		}
		return true;
	}
	,__class__: systems_PlayerMovement
};
var systems_PlayerMovement_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
};
systems_PlayerMovement_$SystemProcess.__name__ = ["systems","PlayerMovement_SystemProcess"];
systems_PlayerMovement_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_PlayerMovement_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
	}
	,addEntity: function(entity) {
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			data = tmp.next().data;
			result = this.system.update(data.pos,data.control);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 2;
		var o = { pos : null, control : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_Position)) {
				o.pos = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
			if(js_Boot.__instanceof(component,components_PlayerControl)) {
				o.control = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_PlayerMovement_$SystemProcess
};
var systems_Renderer = function() {
	this.doorGlyph = new vellum_Glyph(HxOverrides.cca("H",0),"rgb(190, 150, 100)","rgb(100, 64, 32)");
	this.wallGlyph = new vellum_Glyph(HxOverrides.cca("#",0),"#000","rgb(100, 64, 32)");
	this.floorGlyph = new vellum_Glyph(HxOverrides.cca(" ",0),"#fff","rgb(100, 64, 32)");
	this.clearGlyph = new vellum_Glyph(HxOverrides.cca(" ",0),"#000","#000");
	this.__process__ = new systems_Renderer_$SystemProcess(this);
};
systems_Renderer.__name__ = ["systems","Renderer"];
systems_Renderer.__interfaces__ = [edge_ISystem];
systems_Renderer.prototype = {
	update: function(pos,cam) {
		var tmp = this.tileMaps.iterator();
		while(tmp.hasNext()) {
			var tileMap = tmp.next();
			var _g1 = 0;
			var _g = cam.height;
			while(_g1 < _g) {
				var cy = _g1++;
				var _g3 = 0;
				var _g2 = cam.width;
				while(_g3 < _g2) {
					var cx = _g3++;
					var x = cx + (pos.x | 0);
					var y = cy + (pos.y | 0);
					if(x < 0 || y < 0 || x >= tileMap.data.tiles.width || y >= tileMap.data.tiles.height) {
						Main.term.drawGlyph(cx + cam.viewportX,cy + cam.viewportY,this.clearGlyph);
						continue;
					}
					var tmp1 = cx + cam.viewportX;
					var tmp2 = cy + cam.viewportY;
					var _g4 = tileMap.data.tiles.map[y][x];
					var tmp3;
					switch(_g4[1]) {
					case 0:
						tmp3 = this.floorGlyph;
						break;
					case 1:
						tmp3 = this.wallGlyph;
						break;
					case 2:
						tmp3 = this.doorGlyph;
						break;
					}
					Main.term.drawGlyph(tmp1,tmp2,tmp3);
				}
			}
		}
		return true;
	}
	,__class__: systems_Renderer
};
var systems_Renderer_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
	system.tileMaps = new edge_View();
};
systems_Renderer_$SystemProcess.__name__ = ["systems","Renderer_SystemProcess"];
systems_Renderer_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_Renderer_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
		this.system.tileMaps.tryRemove(entity);
	}
	,addEntity: function(entity) {
		this.tileMapsMatchRequirements(entity);
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			data = tmp.next().data;
			result = this.system.update(data.pos,data.cam);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,tileMapsMatchRequirements: function(entity) {
		this.system.tileMaps.tryRemove(entity);
		var count = 2;
		var o = { tiles : null, pos : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_TileMap)) {
				o.tiles = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
			if(js_Boot.__instanceof(component,components_Position)) {
				o.pos = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
		}
		if(count == 0) {
			this.system.tileMaps.tryAdd(entity,o);
		}
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 2;
		var o = { pos : null, cam : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_Position)) {
				o.pos = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
			if(js_Boot.__instanceof(component,components_Camera)) {
				o.cam = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_Renderer_$SystemProcess
};
var systems_Sound = function(universe) {
	Pauseable.call(this,universe);
	this.__process__ = new systems_Sound_$SystemProcess(this);
};
systems_Sound.__name__ = ["systems","Sound"];
systems_Sound.__interfaces__ = [edge_ISystem];
systems_Sound.__super__ = Pauseable;
systems_Sound.prototype = $extend(Pauseable.prototype,{
	onPause: function() {
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			var sound = tmp.next().data.sound;
			if(sound.howl.playing()) {
				sound.howl.pause();
				sound.resume = true;
			}
		}
	}
	,update: function(sound) {
		if(sound.play || sound.resume) {
			sound.howl.play();
			sound.play = false;
			sound.resume = false;
		}
		return true;
	}
	,__class__: systems_Sound
});
var systems_Sound_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
	system.updateItems = new edge_View();
};
systems_Sound_$SystemProcess.__name__ = ["systems","Sound_SystemProcess"];
systems_Sound_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_Sound_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
		this.system.updateItems.tryRemove(entity);
	}
	,addEntity: function(entity) {
		this.updateItemsMatchRequirements(entity);
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			data = tmp.next().data;
			result = this.system.update(data.sound);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,updateItemsMatchRequirements: function(entity) {
		this.system.updateItems.tryRemove(entity);
		var count = 1;
		var o = { sound : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_Sound)) {
				o.sound = component;
				count = 0;
				break;
			}
		}
		if(count == 0) {
			this.system.updateItems.tryAdd(entity,o);
		}
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 1;
		var o = { sound : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_Sound)) {
				o.sound = component;
				count = 0;
				break;
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_Sound_$SystemProcess
};
var systems_TextRenderer = function() {
	this.__process__ = new systems_TextRenderer_$SystemProcess(this);
};
systems_TextRenderer.__name__ = ["systems","TextRenderer"];
systems_TextRenderer.__interfaces__ = [edge_ISystem];
systems_TextRenderer.prototype = {
	update: function(pos,text) {
		Main.term.print(pos.x | 0,pos.y | 0,text.text,text.foreground,text.background);
		return true;
	}
	,__class__: systems_TextRenderer
};
var systems_TextRenderer_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
};
systems_TextRenderer_$SystemProcess.__name__ = ["systems","TextRenderer_SystemProcess"];
systems_TextRenderer_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_TextRenderer_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
	}
	,addEntity: function(entity) {
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			data = tmp.next().data;
			result = this.system.update(data.pos,data.text);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 2;
		var o = { pos : null, text : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_Position)) {
				o.pos = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
			if(js_Boot.__instanceof(component,components_Text)) {
				o.text = component;
				if(--count == 0) {
					break;
				} else {
					continue;
				}
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_TextRenderer_$SystemProcess
};
var systems_TileMapGenerator = function() {
	this.__process__ = new systems_TileMapGenerator_$SystemProcess(this);
};
systems_TileMapGenerator.__name__ = ["systems","TileMapGenerator"];
systems_TileMapGenerator.__interfaces__ = [edge_ISystem];
systems_TileMapGenerator.prototype = {
	update: function(generator) {
		var tileMap = new components_TileMap(generator.width,generator.height);
		var _g1 = 0;
		var _g = generator.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = generator.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var _g4 = Std.random(3);
				var tmp;
				switch(_g4) {
				case 0:
					tmp = TTile.Floor;
					break;
				case 1:
					tmp = TTile.Wall;
					break;
				case 2:
					tmp = TTile.Door;
					break;
				default:
					tmp = null;
				}
				tileMap.set(x,y,tmp);
			}
		}
		this.entity.remove(generator);
		this.entity.add(tileMap);
		return true;
	}
	,__class__: systems_TileMapGenerator
};
var systems_TileMapGenerator_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
};
systems_TileMapGenerator_$SystemProcess.__name__ = ["systems","TileMapGenerator_SystemProcess"];
systems_TileMapGenerator_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_TileMapGenerator_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
	}
	,addEntity: function(entity) {
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			var item = tmp.next();
			this.system.entity = item.entity;
			data = item.data;
			result = this.system.update(data.generator);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 1;
		var o = { generator : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_TileMapGeneration)) {
				o.generator = component;
				count = 0;
				break;
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_TileMapGenerator_$SystemProcess
};
var systems_Timer = function() {
	this.__process__ = new systems_Timer_$SystemProcess(this);
};
systems_Timer.__name__ = ["systems","Timer"];
systems_Timer.__interfaces__ = [edge_ISystem];
systems_Timer.prototype = {
	update: function(timer) {
		timer.time -= this.timeDelta;
		if(timer.time <= 0) {
			if(timer.event != null) {
				this.entity.engine.create([new components_Event(timer.event)]);
			}
			this.entity.destroy();
		}
		return true;
	}
	,__class__: systems_Timer
};
var systems_Timer_$SystemProcess = function(system) {
	this.system = system;
	this.updateItems = new edge_View();
};
systems_Timer_$SystemProcess.__name__ = ["systems","Timer_SystemProcess"];
systems_Timer_$SystemProcess.__interfaces__ = [edge_core_ISystemProcess];
systems_Timer_$SystemProcess.prototype = {
	removeEntity: function(entity) {
		this.updateItems.tryRemove(entity);
	}
	,addEntity: function(entity) {
		this.updateMatchRequirements(entity);
	}
	,update: function(engine,delta) {
		this.system.timeDelta = delta;
		var result = true;
		var data;
		var tmp = this.updateItems.iterator();
		while(tmp.hasNext()) {
			var item = tmp.next();
			this.system.entity = item.entity;
			data = item.data;
			result = this.system.update(data.timer);
			if(!result) {
				break;
			}
		}
		return result;
	}
	,updateMatchRequirements: function(entity) {
		this.updateItems.tryRemove(entity);
		var count = 1;
		var o = { timer : null};
		var _this = entity.map;
		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tmp.hasNext()) {
			var component = tmp.next();
			if(js_Boot.__instanceof(component,components_Timer)) {
				o.timer = component;
				count = 0;
				break;
			}
		}
		if(count == 0) {
			this.updateItems.tryAdd(entity,o);
		}
	}
	,__class__: systems_Timer_$SystemProcess
};
var thx_Either = { __ename__ : true, __constructs__ : ["Left","Right"] };
thx_Either.Left = function(value) { var $x = ["Left",0,value]; $x.__enum__ = thx_Either; $x.toString = $estr; return $x; };
thx_Either.Right = function(value) { var $x = ["Right",1,value]; $x.__enum__ = thx_Either; $x.toString = $estr; return $x; };
var universes_Intro = function() {
	Universe.call(this);
	this.input.bind(new vellum_KeyBind(27,vellum_KeyEventType.DOWN),Intent.Skip);
	this.input.bind(new vellum_KeyBind(13,vellum_KeyEventType.DOWN),Intent.Skip);
	this.update.add(new systems_IntentEvent());
	this.update.add(new systems_ChangeUniverseEvent());
	this.render.add(new systems_TextRenderer());
	this.engine.create([new components_Text("No intro yet!"),new components_Position(0,0)]);
	this.engine.create([new components_Text("Press [ESC] to continue..."),new components_Position(Main.term.get_width() - 26,Main.term.get_height() - 1)]);
	this.engine.create([new components_IntentEvent(Intent.Skip,TEvent.ChangeUniverse("MainMenu"))]);
};
universes_Intro.__name__ = ["universes","Intro"];
universes_Intro.__super__ = Universe;
universes_Intro.prototype = $extend(Universe.prototype,{
	__class__: universes_Intro
});
var universes_MainMenu = function() {
	Universe.call(this);
	this.input.bind(new vellum_KeyBind(13,vellum_KeyEventType.DOWN),Intent.Select);
	this.input.bind(new vellum_KeyBind(38,vellum_KeyEventType.DOWN),Intent.Previous);
	this.input.bind(new vellum_KeyBind(87,vellum_KeyEventType.DOWN),Intent.Previous);
	this.input.bind(new vellum_KeyBind(37,vellum_KeyEventType.DOWN),Intent.Previous);
	this.input.bind(new vellum_KeyBind(65,vellum_KeyEventType.DOWN),Intent.Previous);
	this.input.bind(new vellum_KeyBind(40,vellum_KeyEventType.DOWN),Intent.Next);
	this.input.bind(new vellum_KeyBind(83,vellum_KeyEventType.DOWN),Intent.Next);
	this.input.bind(new vellum_KeyBind(39,vellum_KeyEventType.DOWN),Intent.Next);
	this.input.bind(new vellum_KeyBind(68,vellum_KeyEventType.DOWN),Intent.Next);
	this.update.add(new systems_Menu());
	this.update.add(new systems_DebugEvent());
	this.update.add(new systems_ChangeUniverseEvent());
	this.render.add(new systems_TextRenderer());
	this.engine.create([new components_Text("== Main Menu ==","rgb(255, 192, 0)"),new components_Position((Main.term.get_width() - 15) / 2,1)]);
	this.engine.create([new components_Text(">","rgb(255, 192, 0)"),new components_MenuSelector(0).setOffset(-2,0),new components_Position(0,0)]);
	this.engine.create([new components_Text("Start"),new components_Position(3,3),new components_MenuItem(0,TEvent.ChangeUniverse("Play"))]);
	this.engine.create([new components_Text("Options"),new components_Position(3,4),new components_MenuItem(1,TEvent.DebugMessage("TODO: handle 'Options' action!"))]);
	this.engine.create([new components_Text("Credits"),new components_Position(3,5),new components_MenuItem(2,TEvent.DebugMessage("TODO: handle 'Credits' action!"))]);
	this.engine.create([new components_Text("Quit"),new components_Position(Main.term.get_width() - 6,Main.term.get_height() - 2),new components_MenuItem(3,TEvent.DebugMessage("TODO: handle 'Quit' action!"))]);
};
universes_MainMenu.__name__ = ["universes","MainMenu"];
universes_MainMenu.__super__ = Universe;
universes_MainMenu.prototype = $extend(Universe.prototype,{
	__class__: universes_MainMenu
});
var universes_Play = function() {
	Universe.call(this);
	this.input.bind(new vellum_KeyBind(38,vellum_KeyEventType.DOWN),Intent.Up);
	this.input.bind(new vellum_KeyBind(39,vellum_KeyEventType.DOWN),Intent.Right);
	this.input.bind(new vellum_KeyBind(40,vellum_KeyEventType.DOWN),Intent.Down);
	this.input.bind(new vellum_KeyBind(37,vellum_KeyEventType.DOWN),Intent.Left);
	this.update.add(new systems_TileMapGenerator());
	this.update.add(new systems_PlayerMovement());
	this.update.add(new systems_IntentEvent());
	this.update.add(new systems_ChangeUniverseEvent());
	this.render.add(new systems_Renderer());
	this.engine.create([new components_Position(0,0),new components_TileMapGeneration(80,30)]);
	this.engine.create([new components_Position(0,0),new components_Camera(0,0,60,25),new components_PlayerControl()]);
};
universes_Play.__name__ = ["universes","Play"];
universes_Play.__super__ = Universe;
universes_Play.prototype = $extend(Universe.prototype,{
	__class__: universes_Play
});
var universes_Splash = function() {
	Universe.call(this);
	this.input.bind(new vellum_KeyBind(27,vellum_KeyEventType.DOWN),Intent.Skip);
	this.update.add(new systems_Kinematics());
	this.update.add(new systems_KeepInBounds());
	this.update.add(new systems_Sound(this));
	this.update.add(new systems_IntentEvent());
	this.update.add(new systems_Timer());
	this.update.add(new systems_ChangeUniverseEvent());
	this.render.add(new systems_ImageRenderer());
	this.render.add(new systems_TextRenderer());
	this.engine.create([new components_Image(Logo.src).addMap(".",HxOverrides.cca("#",0),"rgb(220, 0, 0)").addMap(":",HxOverrides.cca("#",0),"rgb(255, 128, 0)").addMap("%",HxOverrides.cca("#",0),"rgb(255, 255, 0)").addMap("#",HxOverrides.cca("#",0),"rgb(64, 64, 64)").addMap("+",HxOverrides.cca("#",0),"#fff"),new components_Position(23,25),new components_Velocity(0,-19.3939393939393945)]);
	this.engine.create([new components_Text("Blazing Mammoth Games","rgb(255, 192, 0)"),new components_Position(29.5,60),new components_Velocity(0,-19.3939393939393945),new components_Bounds().y(12,100)]);
	this.engine.create([new components_Sound("blazingmammothgames.ogg",true,false)]);
	this.engine.create([new components_Timer(5,TEvent.ChangeUniverse("Intro"))]);
	this.engine.create([new components_IntentEvent(Intent.Skip,TEvent.ChangeUniverse("Intro"))]);
};
universes_Splash.__name__ = ["universes","Splash"];
universes_Splash.__super__ = Universe;
universes_Splash.prototype = $extend(Universe.prototype,{
	__class__: universes_Splash
});
var vellum_Display = function(width,height) {
	this._width = width;
	this._height = height;
	this.glyphs = [];
	var _g1 = 0;
	while(_g1 < height) {
		++_g1;
		var row = [];
		var _g3 = 0;
		while(_g3 < width) {
			++_g3;
			row.push(vellum_Glyph.fromChar(" "));
		}
		this.glyphs.push(row);
	}
};
vellum_Display.__name__ = ["vellum","Display"];
vellum_Display.prototype = {
	get_width: function() {
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,clear: function(clearGlyph) {
		if(clearGlyph == null) {
			clearGlyph = vellum_Glyph.fromChar(" ");
		}
		var _g1 = 0;
		var _g = this.get_height();
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.get_width();
			while(_g3 < _g2) this.writeGlyph(_g3++,y,clearGlyph);
		}
	}
	,print: function(x,y,text,foreground,background) {
		var _g1 = 0;
		var _g = text.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(x + i >= this.get_width()) {
				break;
			}
			this.writeCharCode(x + i,y,text.charCodeAt(i),foreground,background);
		}
	}
	,printGlyphs: function(x,y,glyphs) {
		var _g = 0;
		while(_g < glyphs.length) {
			var glyph = glyphs[_g];
			++_g;
			if(x >= this.get_width()) {
				break;
			}
			this.writeGlyph(x,y,glyph);
			++x;
		}
	}
	,writeGlyph: function(x,y,glyph) {
		this.writeCharCode(x,y,glyph.code,glyph.foreground,glyph.background);
	}
	,writeCharCode: function(x,y,code,foreground,background) {
		if(x < 0 || y < 0 || x >= this.get_width() || y >= this.get_height()) {
			return;
		}
		this.glyphs[y][x].code = code;
		this.glyphs[y][x].set_foreground(foreground);
		this.glyphs[y][x].set_background(background);
	}
	,render: function() {
	}
	,__class__: vellum_Display
};
var vellum_Terminal = function(width,height) {
	this.windows = [];
	vellum_Display.call(this,width,height);
};
vellum_Terminal.__name__ = ["vellum","Terminal"];
vellum_Terminal.__super__ = vellum_Display;
vellum_Terminal.prototype = $extend(vellum_Display.prototype,{
	render: function() {
		var _g = 0;
		var _g1 = this.windows;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			w.render();
			var _g3 = 0;
			var _g2 = w.get_height();
			while(_g3 < _g2) {
				var wy = _g3++;
				var _g5 = 0;
				var _g4 = w.get_width();
				while(_g5 < _g4) {
					var wx = _g5++;
					var tx = w.x + wx;
					var ty = w.y + wy;
					if(tx < 0 || ty < 0 || tx >= this.get_width() || ty >= this.get_height()) {
						continue;
					}
					this.writeGlyph(tx,ty,w.glyphs[wy][wx]);
				}
			}
		}
	}
	,__class__: vellum_Terminal
});
var vellum_RenderableTerminal = function(width,height) {
	vellum_Terminal.call(this,width,height);
	this.oldGlyphs = [];
	var _g1 = 0;
	while(_g1 < height) {
		var y = _g1++;
		var row = [];
		var _g3 = 0;
		while(_g3 < width) row.push(this.glyphs[y][_g3++].copy());
		this.oldGlyphs.push(row);
	}
};
vellum_RenderableTerminal.__name__ = ["vellum","RenderableTerminal"];
vellum_RenderableTerminal.__super__ = vellum_Terminal;
vellum_RenderableTerminal.prototype = $extend(vellum_Terminal.prototype,{
	render: function() {
		vellum_Terminal.prototype.render.call(this);
		var _g1 = 0;
		var _g = this.get_height();
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.get_width();
			while(_g3 < _g2) {
				var x = _g3++;
				if(this.glyphs[y][x].notEquals(this.oldGlyphs[y][x])) {
					this.drawGlyph(x,y,this.glyphs[y][x]);
					this.oldGlyphs[y][x].code = this.glyphs[y][x].code;
					this.oldGlyphs[y][x].set_foreground(this.glyphs[y][x].foreground);
					this.oldGlyphs[y][x].set_background(this.glyphs[y][x].background);
				}
			}
		}
	}
	,drawGlyph: function(x,y,glyph) {
	}
	,__class__: vellum_RenderableTerminal
});
var vellum_DOSTerminal = function(width,height,canvas,handleInput) {
	this.fontColourCache = new haxe_ds_StringMap();
	this.d = new promhx_Deferred();
	this.imageLoaded = false;
	var _gthis = this;
	vellum_RenderableTerminal.call(this,width,height);
	if(canvas == null) {
		canvas = window.document.createElement("canvas");
		window.document.body.appendChild(canvas);
	}
	this.canvas = canvas;
	this.context = canvas.getContext("2d",null);
	this.context.font = "" + 12 * window.devicePixelRatio + "px monospace";
	this.context.fillStyle = "#fff";
	this.context.fillText("Loading...",(canvas.width - this.context.measureText("Loading...").width) / 2,(canvas.height - 18) / 2);
	this.fontImage = window.document.createElement("img");
	this.fontImage.src = "dos-short.png";
	this.fontImage.onload = function(_) {
		_gthis.imageLoaded = true;
		_gthis.d.resolve(true);
	};
	this.font = new vellum_Font("dos",8);
	this.font.charWidth = 9;
	this.font.lineHeight = 13;
	this.font.x = 0;
	this.font.y = 0;
	this.resizeCanvas();
	this.set_handlingInput(handleInput == null?true:handleInput);
};
vellum_DOSTerminal.__name__ = ["vellum","DOSTerminal"];
vellum_DOSTerminal.__super__ = vellum_RenderableTerminal;
vellum_DOSTerminal.prototype = $extend(vellum_RenderableTerminal.prototype,{
	set_handlingInput: function(x) {
		window.document.body.onkeydown = x?$bind(this,this.onKeyDown):null;
		window.document.body.onkeyup = x?$bind(this,this.onKeyUp):null;
		window.document.body.onkeypress = x?$bind(this,this.onKeyPress):null;
		this.handlingInput = x;
		return this.handlingInput;
	}
	,resizeCanvas: function() {
		this.canvas.width = Math.ceil(this.font.charWidth * this.get_width());
		this.canvas.height = Math.ceil(this.font.lineHeight * this.get_height());
		this.canvas.style.width = "" + this.canvas.width + "px";
		this.canvas.style.height = "" + this.canvas.height + "px";
	}
	,load: function() {
		return this.d.promise();
	}
	,onKeyDown: function(event) {
		this.onKeyEvent(event,vellum_KeyEventType.DOWN);
	}
	,onKeyUp: function(event) {
		this.onKeyEvent(event,vellum_KeyEventType.UP);
	}
	,onKeyPress: function(event) {
		this.onKeyEvent(event,vellum_KeyEventType.PRESSED);
	}
	,onKeyEvent: function(event,type) {
		var keyCode = event.keyCode == 59?186:event.keyCode;
		if(this.onInputEvent != null) {
			if(this.onInputEvent(keyCode,type,event.shiftKey,event.altKey)) {
				event.preventDefault();
			}
		}
	}
	,drawGlyph: function(x,y,glyph) {
		if(!this.imageLoaded) {
			return;
		}
		this.context.fillStyle = glyph.background;
		this.context.fillRect(x * this.font.charWidth,y * this.font.lineHeight,this.font.charWidth,this.font.lineHeight);
		if(glyph.code == 0 || glyph.code == HxOverrides.cca(" ",0)) {
			return;
		}
		var sx = glyph.code % 32 * this.font.charWidth;
		var sy = (glyph.code / 32 | 0) * this.font.lineHeight;
		this.context.drawImage(this.getColouredFont(glyph.foreground),sx,sy,this.font.charWidth,this.font.lineHeight,x * this.font.charWidth,y * this.font.lineHeight,this.font.charWidth,this.font.lineHeight);
	}
	,getColouredFont: function(colour) {
		var _this = this.fontColourCache;
		var key = colour;
		if(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key)) {
			var _this1 = this.fontColourCache;
			var key1 = colour;
			if(__map_reserved[key1] != null) {
				return _this1.getReserved(key1);
			} else {
				return _this1.h[key1];
			}
		}
		var tint = window.document.createElement("canvas");
		tint.width = this.fontImage.width;
		tint.height = this.fontImage.height;
		var ctx = tint.getContext("2d",null);
		ctx.drawImage(this.fontImage,0,0);
		ctx.globalCompositeOperation = "source-atop";
		ctx.fillStyle = colour;
		ctx.fillRect(0,0,this.fontImage.width,this.fontImage.height);
		var _this2 = this.fontColourCache;
		var key2 = colour;
		if(__map_reserved[key2] != null) {
			_this2.setReserved(key2,tint);
		} else {
			_this2.h[key2] = tint;
		}
		return tint;
	}
	,__class__: vellum_DOSTerminal
});
var vellum_Font = function(family,size) {
	this.family = family;
	this.size = size;
};
vellum_Font.__name__ = ["vellum","Font"];
vellum_Font.prototype = {
	__class__: vellum_Font
};
var vellum_Glyph = function(code,foreground,background) {
	this.code = code;
	this.set_foreground(foreground);
	this.set_background(background);
};
vellum_Glyph.__name__ = ["vellum","Glyph"];
vellum_Glyph.fromChar = function($char,foreground,background) {
	if($char.length < 1) {
		throw new js__$Boot_HaxeError("_char_ **must** have at least 1 character!");
	}
	return new vellum_Glyph($char.charCodeAt(0),foreground,background);
};
vellum_Glyph.prototype = {
	set_foreground: function(c) {
		if(c == null) {
			this.foreground = vellum_Glyph.CLEAR_FOREGROUND;
		} else {
			this.foreground = c;
		}
		return this.foreground;
	}
	,set_background: function(c) {
		if(c == null) {
			this.background = vellum_Glyph.CLEAR_BACKGROUND;
		} else {
			this.background = c;
		}
		return this.background;
	}
	,notEquals: function(other) {
		if(!(this.code != other.code || this.foreground != other.foreground)) {
			return this.background != other.background;
		} else {
			return true;
		}
	}
	,copy: function() {
		return new vellum_Glyph(this.code,this.foreground,this.background);
	}
	,__class__: vellum_Glyph
};
var vellum_Input_$Intent = function() {
	this.bindings = new haxe_ds_ObjectMap();
};
vellum_Input_$Intent.__name__ = ["vellum","Input_Intent"];
vellum_Input_$Intent.prototype = {
	bind: function(binding,input) {
		this.bindings.set(binding,input);
	}
	,check: function(keyCode,type,shift,alt) {
		var tmp = this.bindings.keys();
		while(tmp.hasNext()) {
			var b = tmp.next();
			if(b.keyCode == keyCode && b.type == type && b.shift == shift && b.alt == alt) {
				return this.bindings.h[b.__id__];
			}
		}
		return null;
	}
	,__class__: vellum_Input_$Intent
};
var vellum_KeyBind = function(keyCode,type,shift,alt) {
	this.keyCode = keyCode;
	this.type = type;
	this.shift = shift != null && shift;
	this.alt = alt != null && alt;
};
vellum_KeyBind.__name__ = ["vellum","KeyBind"];
vellum_KeyBind.prototype = {
	__class__: vellum_KeyBind
};
var vellum_KeyEventType = { __ename__ : true, __constructs__ : ["DOWN","UP","PRESSED"] };
vellum_KeyEventType.DOWN = ["DOWN",0];
vellum_KeyEventType.DOWN.toString = $estr;
vellum_KeyEventType.DOWN.__enum__ = vellum_KeyEventType;
vellum_KeyEventType.UP = ["UP",1];
vellum_KeyEventType.UP.toString = $estr;
vellum_KeyEventType.UP.__enum__ = vellum_KeyEventType;
vellum_KeyEventType.PRESSED = ["PRESSED",2];
vellum_KeyEventType.PRESSED.toString = $estr;
vellum_KeyEventType.PRESSED.__enum__ = vellum_KeyEventType;
var vellum_Window = function() { };
vellum_Window.__name__ = ["vellum","Window"];
vellum_Window.__super__ = vellum_Display;
vellum_Window.prototype = $extend(vellum_Display.prototype,{
	__class__: vellum_Window
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var __map_reserved = {}
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var global = window;
Logo.src = StringTools.replace("                         .        \n                         ..       \n             .            ..      \n            ..            ..      \n           ..            ...      \n           ..      .   .....      \n     .     ...    ..  .....       \n     ...    .... .... ....        \n     ....  ...............        \n      ... ...::...::..:..         \n      ......::######::...         \n       .:..::##++++##:..          \n       ..:::##++++++##..    .     \n       ...::#++####++#...  ..     \n        ...:#++####++#:..  ..     \n   .    ..::#+++##+++#:.. ...     \n   ...  ..::#+++##+++#::....      \n ###... ..::##++##++##::....  ### \n##+#......::%##++++##:::...   #+## \n#++#.....:::%%#++++#%::...    #++# \n#+## ..::::%%%#++++#%::..   . ##+# \n#+#  ...::%%%%#++++#%%:.. ...  #+# \n#+## ..:::%%%##++++##::.....  ##+# \n#++##...:::%%#++++++#:::.... ##++# \n#+++# ...:::##++##++##:::..  #+++# \n##++###..:###++####++###...###++## \n ##+++#####++++#%%#++++#####+++## \n  ##++++#+++++##%%##+++++#++++##  \n   ##+++++++###%:::###+++++++##   \n    ###+++###..:.....###+++###    \n      #####   ...      #####      \n      #####   ...      #####      ","\r","");
Main.console = window.console;
Main._universes = new haxe_ds_StringMap();
Main.intents = [];
Main.tempIntents = [];
Timing.animationFrameID = 0;
Timing.time = 0;
Timing.lastTime = 0;
Timing.accumulator = 0;
Timing.dt = 0.0333333333333333329;
Timing.alpha = 0;
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = { }.toString;
promhx_base_AsyncBase.id_ctr = 0;
promhx_base_EventLoop.queue = new List();
vellum_Glyph.CLEAR_FOREGROUND = "#fff";
vellum_Glyph.CLEAR_BACKGROUND = "#000";
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=game.js.map